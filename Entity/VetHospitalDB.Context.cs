//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VETAPP.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class VetHospitalDatabaseEntities : DbContext
    {
        public VetHospitalDatabaseEntities()
            : base("name=VetHospitalDatabaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Appointment> Appointments { get; set; }
        public virtual DbSet<MedicalRecord> MedicalRecords { get; set; }
        public virtual DbSet<Medication> Medications { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual ObjectResult<sp_getProfit_Result> sp_getProfit()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProfit_Result>("sp_getProfit");
        }
    
        public virtual ObjectResult<sp_getPatientsByUser_Result> sp_getPatientsByUser(Nullable<long> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getPatientsByUser_Result>("sp_getPatientsByUser", userIdParameter);
        }
    
        public virtual ObjectResult<sp_getAppointmentsByPatient_Result> sp_getAppointmentsByPatient(Nullable<long> patientId)
        {
            var patientIdParameter = patientId.HasValue ?
                new ObjectParameter("PatientId", patientId) :
                new ObjectParameter("PatientId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getAppointmentsByPatient_Result>("sp_getAppointmentsByPatient", patientIdParameter);
        }
    
        public virtual ObjectResult<sp_getMedicalRecordsByPatient_Result> sp_getMedicalRecordsByPatient(Nullable<long> patientId)
        {
            var patientIdParameter = patientId.HasValue ?
                new ObjectParameter("PatientId", patientId) :
                new ObjectParameter("PatientId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getMedicalRecordsByPatient_Result>("sp_getMedicalRecordsByPatient", patientIdParameter);
        }
    }
}
